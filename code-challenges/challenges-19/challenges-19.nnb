{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Hacker Rank\n\nFor Thursdays you will be solving some selected challenges on HackerRank, please create an account if you don't have then\nFollow the links below:\nread them carefully and solve them then copy-paste your solution below in Code Block"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Required**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Append And Delete](https://www.hackerrank.com/challenges/append-and-delete/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'appendAndDelete' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. STRING t\n *  3. INTEGER k\n */\n\nfunction appendAndDelete(s, t, k) {\n    const n = s.length;\n  const m = t.length;\n  let common = 0;\n\n  for (let i = 0; i < Math.min(n, m); i++) {\n    if (s.charAt(i) == t.charAt(i)) {\n      common++;\n    } else {\n      break;\n    }\n  }\n\n  if (n + m - 2 * common > k) {\n    return \"No\";\n  }\n\n  if ((k - (n + m - 2 * common)) % 2 == 0) {\n    return \"Yes\";\n  }\n\n  if ((k - (n + m - 2 * common)) >= 2 * common) {\n    return \"Yes\";\n  }\n\n  return \"No\";\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const t = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = appendAndDelete(s, t, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Optional**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Encryption](https://www.hackerrank.com/challenges/encryption/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n      s.replace(/\\s/g, '');\n    \n  let k = Math.ceil(Math.sqrt(s.length))\n    \n const result = s.replace(new RegExp(`(.{${k}})`, \"g\"), \"$1 \").split(\" \");;\n const newArray = [];\n\nconst maxLength = Math.max(...result.map(str => str.length));\n\nfor (let i = 0; i < maxLength; i++) {\n  let newString = \"\";\n  for (let j = 0; j < result.length; j++) {\n    const char = result[j][i] || \" \";\n    newString += char;\n  }\n  newArray.push(newString.trimRight());\n \n}\nlet finalString = newArray.join(\" \");\nreturn(finalString)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [The Time In Words](https://www.hackerrank.com/challenges/the-time-in-words/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {\n  const hours = [\n    \"twelve\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\"\n  ];\n\n  const minutes = [\n    \"\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\",\n    \"twelve\",\n    \"thirteen\",\n    \"fourteen\",\n    \"quarter\",\n    \"sixteen\",\n    \"seventeen\",\n    \"eighteen\",\n    \"nineteen\",\n    \"twenty\",\n    \"twenty one\",\n    \"twenty two\",\n    \"twenty three\",\n    \"twenty four\",\n    \"twenty five\",\n    \"twenty six\",\n    \"twenty seven\",\n    \"twenty eight\",\n    \"twenty nine\",\n    \"half\"\n  ];\n\n  let timeStr;\n\n  if (m === 0) {\n    timeStr = `${hours[h]} o' clock`;\n  } else if (m === 15) {\n    timeStr = `quarter past ${hours[h]}`;\n  } else if (m === 30) {\n    timeStr = `half past ${hours[h]}`;\n  } else if (m === 45) {\n    timeStr = `quarter to ${hours[h + 1 === 12 ? 0 : h + 1]}`;\n  } else if (m <= 30) {\n    timeStr = `${minutes[m]} ${m === 1 ? \"minute\" : \"minutes\"} past ${hours[h]}`;\n  } else {\n    timeStr = `${minutes[60 - m]} ${\n      60 - m === 1 ? \"minute\" : \"minutes\"\n    } to ${hours[h + 1 === 12 ? 0 : h + 1]}`;\n  }\n\n  return timeStr;\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        }
    ]
}